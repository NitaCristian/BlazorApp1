@page "/login"

@inject AuthenticationService AuthService
@inject NavigationManager NavManager

<h3>Login</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}
<AuthorizeView Context="AuthContext">
    <Authorized>
        <p>You are logged in as: @AuthContext.User.Identity.Name</p>
        <button class="btn btn-primary" @onclick="HandleLogout">Logout</button>
    </Authorized>
    <NotAuthorized>
        <EditForm Model="model" OnValidSubmit="HandleLogin" class="card card-body bg-light mt-5 form form-horizontal" Context="FormContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-5">
                <label for="username" class="col-md-2 col-form-label">Username</label>
                <div class="col-md-10">
                    <InputText id="username" class="form-control" @bind-Value="model.Username"></InputText>
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
            </div>

            <div class="form-group mt-5">
                <label for="password" class="col-md-2 col-form-label">Password</label>
                <div class="col-md-10">
                    <InputText type="password" id="password" class="form-control" @bind-Value="model.Password"></InputText>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
            </div>

            <div class="">
                <div class="col-md-12 text-right">
                    <button type="submit" class="btn btn-success">Log In</button>
                </div>
            </div>
        </EditForm>
    </NotAuthorized>
</AuthorizeView>



@code {
    private UserDto model = new();
    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private async Task HandleLogin()
    {
        showAuthenticationError = false;

        var result = await AuthService.Login(model);

        if (result)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an error when trying to log in";
            showAuthenticationError = true;
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.SignOutUser();
    }
}
